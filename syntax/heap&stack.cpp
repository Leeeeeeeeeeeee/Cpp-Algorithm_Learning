/**
 * 堆和栈是两种常见的数据结构，它们有以下不同点：

存储方式
栈是一种先进后出（Last In First Out，LIFO）的数据结构，它的元素只能从顶部插入和弹出。在计算机内存中，栈通常采用连续的内存空间存储，由操作系统自动分配和释放。

堆是一种基于树结构的数据结构，它的元素可以在任意位置插入和删除，没有固定的顺序。在计算机内存中，堆通常采用不连续的内存空间存储，由程序员手动分配和释放。

内存管理
栈的内存管理是由操作系统自动完成的，每当函数被调用时，栈会自动为函数的局部变量和返回地址分配一定的内存空间。当函数返回时，栈会自动释放这些空间。

堆的内存管理是由程序员手动完成的。在使用堆存储数据时，程序员需要手动分配一定的内存空间，使用完后需要手动释放。如果没有释放，就会造成内存泄漏问题。

存储内容
栈通常用于存储局部变量、函数调用信息和一些临时数据。栈中的数据通常比较小，但是访问速度比堆快。

堆通常用于存储动态分配的数据，例如数组、对象和指针等。堆中的数据可以比较大，但是访问速度比栈慢。

总的来说，栈和堆都有各自的优缺点，适用于不同的场景。程序员在使用时应根据具体的需求来选择合适的数据结构。
*/

#include <iostream>
using namespace std;

int main(){
  int a = int(1);//int a = 1;在栈里,初始化为1
  int* p1 = new int(1);//声明int变量在堆区，初始化为1，和delete配套,new出来的东西一定要用指针去接
  int* p2 = new int[3];//声明int数组在堆区

  delete p1;
  delete[] p2;
}
